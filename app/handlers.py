import os

import aiogram

import app.admin
import app.admin.keyboards
import app.database.models
import app.database.requests
import app.keyboards
import app.messages
import app.states as st
import app.states


router = aiogram.Router()


@router.message(aiogram.filters.CommandStart())
async def cmd_start(message: aiogram.types.Message):
    await message.answer(
        app.messages.START_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üì® –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_create_ticket(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å (–∫—Ä–∞—Ç–∫–æ)",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(st.CreateTicket.question)


@router.message(aiogram.F.text == "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def cmd_giftcards(
    message: aiogram.types.Message,
):
    await message.answer(
        app.messages.GIFT_CARDS,
        reply_markup=app.keyboards.GIFT_CARDS,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üì¨ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def cmd_create_giftcard(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ôªÔ∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±—É–¥—É—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (500-25000 —Ä—É–±.)\n"
        "–ù–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä - –∏–Ω–∞—á–µ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(st.CreateGiftCard.amount)


@router.message(st.CreateGiftCard.amount)
async def cmd_create_giftcard_amount(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    if 500 <= int(message.text) <= 25000:
        await state.update_data(amount=message.text.lower())
        await message.answer(
            f"‚ôªÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {message.text} —Ä—É–±. –ü–µ—Ä–µ—Å—ã–ª–∞—é –≤–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–ª–∞—Ç–µ–∂–æ–º - –ø–æ—Å–ª–µ —á–µ–≥–æ, —è –ø–µ—Ä–µ–≤–µ–¥—É"
            " –≤–∞—Å –Ω–∞ –ê–≥–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—Å—Ç –≤–∞–º –∫–æ–¥ –æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
            reply_markup=app.keyboards.CANCEL_OR_BACK,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
        await message.answer(
            app.messages.PAYMENT,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )

        await state.set_state(st.CreateGiftCard.sckreenshot)
    else:
        await message.answer(
            app.messages.ERORR_MESSAGE + "–°—É–º–º–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 500 –¥–æ 25000 —Ä—É–±.",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
        await state.set_state(st.CreateGiftCard.amount)
        return


@router.message(aiogram.F.photo, st.CreateGiftCard.sckreenshot)
async def cmd_create_giftcard_screenshot(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    async with app.database.models.async_session() as session:
        await state.update_data(sckreen=message.photo[-1].file_id)

        owner = await app.database.requests.get_user(message.from_user.id)
        await state.update_data(owner=owner.id)

        gift_cards = await app.database.requests.get_inactive_giftcards_user(owner.id)
        if not gift_cards:
            data = await state.get_data()
            new_gift = await app.database.requests.add_giftcard(session, data)
            session.commit()

            keyboard = aiogram.utils.keyboard.InlineKeyboardBuilder()
            keyboard.add(
                aiogram.types.InlineKeyboardButton(
                    text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É",
                    callback_data=f"gift_{str(new_gift.id)}",
                ),
            )

            user_profile_link = f'<a href="tg://user?id={message.from_user.id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
            admin_id = os.getenv("ADMIN_ID", "no_admin")
            caption = (
                f"‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–¥–∞—á—É –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É {data.get('amount')} —Ä—É–±."
                f" –∏ –≤—ã–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_profile_link}\n"
            )

            await bot.send_photo(
                chat_id=admin_id,
                photo=data.get("sckreen"),
                caption=caption,
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=keyboard.as_markup(),
            )

            await message.answer(
                "‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ <b>–≤—ã–ø–æ–ª–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É</b>...\n\n"
                "–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ê–≥–µ–Ω—Ç—É –ü–æ–¥–¥–µ—Ä–∂–∫–∏. –°–∫–æ—Ä–æ –æ–Ω <b>—Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∏ –≤—ã–¥–∞—Å—Ç –∫–æ–¥</b>"
                f" –æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É: {data.get('amount')} —Ä—É–±.\n\n"
                "üíö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ PHOENIX STUDIO\n",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=app.keyboards.MAIN,
            )
        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–¥–∞—á—É –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."
                " –î–æ –µ–≥–æ –≤—ã–¥–∞—á–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π",
                reply_markup=app.keyboards.MAIN,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        await state.clear()


@router.message(aiogram.F.text == "üéÄ –ú–æ–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
async def cmd_mygiftcards(message: aiogram.types.Message):
    async with app.database.models.async_session():
        user = await app.database.requests.get_user(message.from_user.id)
        active_giftcards_user = await app.database.requests.get_active_giftcards_user(
            user.id,
        )
        inactive_giftcards_user = await app.database.requests.get_inactive_giftcards_user(
            user.id,
        )

        if active_giftcards_user or inactive_giftcards_user:
            await message.answer(
                "‚ôªÔ∏è –í—ã–≤–æ–∂—É –≤–∞—à–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã...",
                reply_markup=app.keyboards.MAIN,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
            for i in active_giftcards_user:
                is_active = "–î–∞" if i.is_active else "–ù–µ—Ç"
                await message.answer(
                    f"<code>{i.name}</code>\n"
                    f"–°—É–º–º–∞: {i.amount} —Ä—É–±.\n"
                    f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {is_active}\n\n"
                    "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥, <b>–Ω–∞–∂–∞–≤ –Ω–∞ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!"
                    " –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ–Ω —Å–º–æ–∂–µ—Ç –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
                    parse_mode=aiogram.enums.ParseMode.HTML,
                )
            for i in inactive_giftcards_user:
                is_active = "–î–∞" if i.is_active else "–ù–µ—Ç"
                await message.answer(
                    f"<b>–û–∂–∏–¥–∞–µ—Ç –≤—ã–¥–∞—á–∏ –ê–≥–µ–Ω—Ç–æ–º –ü–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n"
                    f"–°—É–º–º–∞: {i.amount} —Ä—É–±.\n"
                    f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {is_active}",
                    parse_mode=aiogram.enums.ParseMode.HTML,
                )
        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )


@router.message(st.CreateTicket.question)
async def cmd_create_ticket_question(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    await state.update_data(question=message.text.lower())

    async with app.database.models.async_session() as session:
        user = await app.database.requests.get_user(message.from_user.id)
        await state.update_data(user=user.id)
        data = await state.get_data()

        tickets_user = await app.database.requests.get_tickets_user(user.id)

        if not tickets_user:
            await app.database.requests.add_ticket(session, data)
            await app.database.requests.update_user_ticket(
                session,
                message.from_user.id,
            )
            ticket_id = await app.database.requests.get_ticket(user.id)

            await message.answer(
                f"‚ôªÔ∏è <b>–¢–∏–∫–µ—Ç ‚Ññ{ticket_id.id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω...\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–≥–µ–Ω—Ç–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å - <b>–∑–∞–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π —Ç–∏–∫–µ—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ</b>",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=app.keyboards.CANCEL_ORDER_OR_CLOSE_TICKET,
            )

            user_profile_link = f'<a href="tg://user?id={message.from_user.id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
            await bot.send_message(
                os.getenv("ADMIN_ID", "no_admin"),
                f"‚ùóÔ∏è –ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π <b>—Ç–∏–∫–µ—Ç ‚Ññ{ticket_id.id}</b>\n" f"{user_profile_link}\n" f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )

        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç\n",
                reply_markup=app.keyboards.CANCEL_ORDER_OR_CLOSE_TICKET,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )

    await state.clear()


@router.message(aiogram.F.text == "üì™ –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def cmd_contacts(message: aiogram.types.Message):
    await message.answer(
        app.messages.CONTACTS_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üíö –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã")
async def cmd_keyboard(message: aiogram.types.Message):
    await message.answer(
        "–°–µ–∫—É–Ω–¥—É... –£–∂–µ –≤—ã–≤–æ–∂—É –≤–∞–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã üíö",
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def cmd_catalog(message: aiogram.types.Message):
    request = await app.database.requests.get_catalog()

    if request:
        await message.answer("‚ôªÔ∏è –°–µ–∫—É–Ω–¥—É, —É–∂–µ –¥–æ—Å—Ç–∞—é –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é –≤–∞–º...")
        for i in request:

            keyboard = aiogram.utils.keyboard.InlineKeyboardBuilder()
            keyboard.add(
                aiogram.types.InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å",
                    callback_data=f"product_{str(i.id)}",
                ),
            )

            await message.answer_photo(
                i.image,
                caption=f"<b>{i.title.title()}</b>\n\n"
                f"{i.description}\n\n"
                f"–¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥—É: {i.price} —Ä—É–±.\n"
                f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {i.deadline} –¥–Ω–µ–π",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=keyboard.as_markup(),
            )

    else:
        await message.answer(
            app.messages.ERORR_MESSAGE + "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )


@router.callback_query(aiogram.F.data.startswith("product_"))
async def product_selected(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    product = callback.data.replace("product_", "")
    await state.update_data(item_id=product)

    await callback.message.answer(
        "‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...\n"
        f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - ‚Ññ{product}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å: (–µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ 0)",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
    )

    await state.set_state(st.CreateOrder.pcode)


@router.message(st.CreateOrder.pcode)
async def order_create_description(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    await state.update_data(pcode=message.text.lower())

    async with app.database.models.async_session() as session:
        user = await app.database.requests.get_user(
            message.from_user.id,
        )
        await state.update_data(user=user.id)

        pcode = None
        if message.text.lower() != "0":
            pcode = await app.database.requests.get_pcode(name=message.text.lower())
            if pcode:
                await app.database.requests.update_pcode(name=message.text.lower())
                await message.answer(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {message.text.lower()} - {pcode.discount}% —Å–∫–∏–¥–∫–∏",
                )
            else:
                await message.answer(
                    app.messages.ERORR_MESSAGE + f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥–∞ {message.text.lower()} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0",
                    parse_mode=aiogram.enums.ParseMode.HTML,
                )
                await state.set_state(st.CreateOrder.pcode)
                return

        data = await state.get_data()
        if await app.database.requests.add_order(session, data):
            await app.database.requests.update_user(
                session,
                tg_id=message.from_user.id,
            )
            await message.answer(
                app.messages.SUCC_CREATE_ORDER_MESSAGE,
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=app.keyboards.CANCEL_ORDER_OR_CLOSE_TICKET,
            )

            user_profile_link = f'<a href="tg://user?id={message.from_user.id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
            discount_info = f"–ü–†–û–ú–û–ö–û–î: {data.get('pcode')} - {pcode.discount}% —Å–∫–∏–¥–∫–∏" if pcode else ""
            item = await app.database.requests.get_item(data.get("item_id"))
            await bot.send_message(
                os.getenv("ADMIN_ID", "admin_id"),
                f"‚ùóÔ∏è –ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n{user_profile_link}\n" f"–¢–æ–≤–∞—Ä: {item.title.title()}\n" f"{discount_info}",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )

        await state.clear()


@router.message(aiogram.F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cmd_cancel_order(message: aiogram.types.Message):
    async with app.database.models.async_session():
        user = await app.database.requests.get_user(message.from_user.id)
        if await app.database.requests.get_order(user.id):
            await app.database.requests.close_order_from_user(user.id)

            await message.answer(
                "‚ôªÔ∏è –í–∞—à –∑–∞–∫–∞–∑ <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω</b>",
                reply_markup=app.keyboards.MAIN,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )


@router.message(aiogram.F.text == "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
async def cmd_close_ticket(message: aiogram.types.Message):
    async with app.database.models.async_session():
        user = await app.database.requests.get_user(message.from_user.id)
        if await app.database.requests.get_tickets_user(user.id):
            await app.database.requests.close_ticket_from_user(user.id)

            await message.answer(
                "‚ôªÔ∏è –í–∞—à —Ç–∏–∫–µ—Ç <b>—É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç</b>",
                reply_markup=app.keyboards.MAIN,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        else:
            await message.answer(
                app.messages.ERORR_MESSAGE + "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )


@router.callback_query(aiogram.F.data.startswith("score_"))
async def score_selected(
    callback: aiogram.types.CallbackQuery,
):
    score = callback.data.replace("score_", "")

    async with app.database.models.async_session() as session:
        await app.database.requests.add_score(session, score)

    await callback.message.delete()
    await callback.message.answer("‚≠êÔ∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")


@router.callback_query(aiogram.F.data.startswith("answer_ticket_"))
async def ticket_answer(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    ticket_id = callback.data.replace("answer_ticket_", "")
    await state.update_data(ticket_id=ticket_id, keyboard_message_id=callback.message.message_id)

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ê–≥–µ–Ω—Ç–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏ <b>(–ø–æ —Ç–∏–∫–µ—Ç—É ‚Ññ{ticket_id})</b>."
        " –¢–∞–∫–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ <b>–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ –∏–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, "
        "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã",
        parse_mode=aiogram.enums.ParseMode.HTML,
        reply_markup=app.keyboards.CANCEL_OR_BACK,
    )

    await state.set_state(app.states.AnswerTicket.message)


@router.message(app.states.AnswerTicket.message)
async def ticket_answer_message(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    data = await state.get_data()

    admin_id = int(os.getenv("ADMIN_ID", "no_admin"))

    await message.answer(
        app.messages.SUCCESS_MESSAGE + "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–≥–µ–Ω—Ç—É –ü–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
        parse_mode=aiogram.enums.ParseMode.HTML,
        reply_markup=aiogram.types.ReplyKeyboardRemove(),
    )
    keyboard_message_id = data.get("keyboard_message_id")
    await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=keyboard_message_id, reply_markup=None)
    await bot.send_message(
        admin_id,
        app.messages.NOTIFICATION_MESSAGE
        + f"–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–∫–µ—Ç—É ‚Ññ{data.get('ticket_id')}",
        reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )
    await bot.forward_message(admin_id, message.chat.id, message.message_id)

    async with app.database.models.async_session():
        pass

    await state.clear()


@router.message(aiogram.F.text == "‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è")
async def cmd_subscription(message: aiogram.types.Message):
    await message.answer(
        app.messages.SUBSCRIPTION_SUCC_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )
