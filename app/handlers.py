import os

import aiogram

import app.database.models
import app.database.requests
import app.keyboards
import app.messages
import app.states as st


router = aiogram.Router()


@router.message(aiogram.filters.CommandStart())
async def cmd_start(message: aiogram.types.Message):
    await message.answer(
        app.messages.START_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üì® –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_create_ticket(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å (–∫—Ä–∞—Ç–∫–æ)",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(st.CreateTicket.question)


@router.message(st.CreateTicket.question)
async def cmd_create_ticket_question(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    await state.update_data(question=message.text.lower())

    async with app.database.models.async_session() as session:
        user = await app.database.requests.get_user(message.from_user.id)
        await state.update_data(user=user.id)
        data = await state.get_data()

        tickets_user = await app.database.requests.get_tickets_user(user.id)

        if not tickets_user:
            await app.database.requests.add_ticket(session, data)
            await app.database.requests.update_user_ticket(
                session,
                message.from_user.id,
            )
            ticket_id = await app.database.requests.get_ticket(user.id)

            await message.answer(
                f"‚ôªÔ∏è <b>–¢–∏–∫–µ—Ç ‚Ññ{ticket_id.id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω...\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–≥–µ–Ω—Ç–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å - <b>–∑–∞–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π —Ç–∏–∫–µ—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ</b>",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=app.keyboards.CANCEL_TICKET,
            )
        else:
            await message.answer(
                "‚ùóÔ∏è –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç\n",
                reply_markup=app.keyboards.CANCEL_TICKET,
            )

    await state.clear()


@router.message(aiogram.F.text == "üì™ –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def cmd_contacts(message: aiogram.types.Message):
    await message.answer(
        app.messages.CONTACTS_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üíö –í—ã–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã")
async def cmd_keyboard(message: aiogram.types.Message):
    await message.answer(
        "–°–µ–∫—É–Ω–¥—É... –£–∂–µ –≤—ã–≤–æ–∂—É –≤–∞–º —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã üíö",
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def cmd_catalog(message: aiogram.types.Message):
    request = await app.database.requests.get_catalog()

    if request:
        await message.answer("‚ôªÔ∏è –°–µ–∫—É–Ω–¥—É, —É–∂–µ –¥–æ—Å—Ç–∞—é –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—é –≤–∞–º...")
        for i in request:

            keyboard = aiogram.utils.keyboard.InlineKeyboardBuilder()
            keyboard.add(
                aiogram.types.InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å",
                    callback_data=f"product_{str(i.id)}",
                ),
            )

            await message.answer_photo(i.image)
            await message.answer(
                f"<b>{i.title.title()}</b>\n\n"
                f"{i.description}\n\n"
                f"–¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥—É: {i.price} —Ä—É–±.\n"
                f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {i.deadline} –¥–Ω–µ–π",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=keyboard.as_markup(),
            )

    else:
        await message.answer(
            "‚ôªÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )


@router.callback_query(aiogram.F.data.startswith("product_"))
async def product_selected(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    product = callback.data.replace("product_", "")
    await state.update_data(item_id=product)

    await callback.message.answer(
        "‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...\n"
        f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä - ‚Ññ{product}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å: (–µ—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ 0)",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
    )

    await state.set_state(st.CreateOrder.pcode)


@router.message(st.CreateOrder.pcode)
async def order_create_description(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    await state.update_data(pcode=message.text.lower())

    async with app.database.models.async_session() as session:
        user = await app.database.requests.get_user(
            message.from_user.id,
        )
        await state.update_data(user=user.id)

        pcode = None
        if message.text.lower() != "0":
            pcode = await app.database.requests.get_pcode(name=message.text.lower())
            if pcode:
                await app.database.requests.update_pcode(name=message.text.lower())
                await message.answer(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {message.text.lower()} - {pcode.discount}% —Å–∫–∏–¥–∫–∏",
                )
            else:
                await message.answer(
                    f"‚ùóÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥–∞ {message.text.lower()} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0",
                )
                await state.set_state(st.CreateOrder.pcode)
                return

        await app.database.requests.update_user(
            session,
            tg_id=message.from_user.id,
        )

        data = await state.get_data()
        if await app.database.requests.add_order(session, data):
            await message.answer(
                app.messages.SUCC_CREATE_ORDER_MESSAGE,
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=app.keyboards.CANCEL_ORDER,
            )

            user_profile_link = f'<a href="tg://user?id={message.from_user.id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
            discount_info = (
                f"–ü–†–û–ú–û–ö–û–î: {data.get('pcode')} - {pcode.discount}% —Å–∫–∏–¥–∫–∏"
                if pcode
                else ""
            )
            item = await app.database.requests.get_item(data.get("item_id"))
            await bot.send_message(
                os.getenv("ADMIN_ID", "admin_id"),
                f"‚ùóÔ∏è –ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n{user_profile_link}\n"
                f"–¢–æ–≤–∞—Ä: {item.title.title()}\n"
                f"{discount_info}",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        else:
            await message.answer("üò± –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑...")

        await state.clear()


@router.message(aiogram.F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def cmd_cancel_order(message: aiogram.types.Message):
    async with app.database.models.async_session() as session:
        user = await app.database.requests.get_user(message.from_user.id)
        if await app.database.requests.get_order(user.id):
            await app.database.requests.delete_order(session, user.id)

            await message.answer(
                "‚ôªÔ∏è –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω",
                reply_markup=app.keyboards.MAIN,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
        else:
            await message.answer("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")


@router.message(aiogram.F.text == "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
async def cmd_close_ticket(message: aiogram.types.Message):

    async with app.database.models.async_session():
        user = await app.database.requests.get_user(message.from_user.id)
        await app.database.requests.close_ticket_from_user(user.id)

    await message.answer(
        "‚ôªÔ∏è –í–∞—à —Ç–∏–∫–µ—Ç <b>—É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç</b>",
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(aiogram.F.text == "‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è")
async def cmd_subscription(message: aiogram.types.Message):
    await message.answer(
        app.messages.SUBSCRIPTION_SUCC_MESSAGE,
        reply_markup=app.keyboards.MAIN,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )
