import os

import aiogram

import app.admin.filters
import app.admin.keyboards
import app.admin.states
import app.database.admin.requests
import app.database.models
import app.database.requests
import app.keyboards


router = aiogram.Router()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "/admin",
)
async def cmd_admin(message: aiogram.types.Message):
    await message.answer(
        "üî∞ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω–∫—É...",
        reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_edit_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "
        "(–í–ù–ò–ú–ê–ù–ò–ï: –í–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏–Ω–∞—á–µ –≤ –±–æ—Ç–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞):",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.EditItem.item)


@router.message(app.admin.states.EditItem.item)
async def edit_item_itemobject(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(object=message.text.lower())

    object = await app.database.admin.requests.get_editable_item(message.text.lower())
    await state.update_data(object_db=object)

    if object:
        await message.answer(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ü–∏—é —Ç–æ–≤–∞—Ä...",
        )
        await message.answer_photo(object.image)
        await message.answer(
            f"<b>{object.title.title()}</b>\n\n"
            f"{object.description}\n\n"
            f"–¶–µ–Ω–∞: {object.price} —Ä—É–±.\n"
            f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {object.deadline} –¥–Ω–µ–π",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
        await message.answer(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä</b> –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É...",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ITEM,
        )

        await state.set_state(app.admin.states.EditItem.choice)
    else:
        await message.answer(
            "üò¢ –í–∏–¥–∏–º–æ, <b>–≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞...</b> –Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–æ–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )

        await state.clear()


@router.message(app.admin.states.EditItem.choice)
async def edit_item_choice(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    if message.text == "–í–µ—Ä–Ω–æ":
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?\n"
            "<b>1) –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
            "<b>2) –û–ø–∏—Å–∞–Ω–∏–µ</b>\n"
            "<b>3) –¶–µ–Ω–∞</b>\n"
            "<b>4) –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
            "<b>5) –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n\n"
            "‚ùóÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ <b>–¶–ò–§–†–£</b> –æ–±–æ–∑–Ω–∞—á–∞—é—â—É—é –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

        await state.set_state(app.admin.states.EditItem.editable_object)
    else:
        await message.answer("üëã –ü–æ–Ω—è–ª, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—è—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")

        await state.clear()


@router.message(app.admin.states.EditItem.editable_object)
async def edit_item_editable_object(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(editable_object=message.text.lower())

    data = await state.get_data()
    object = data.get("object_db")

    if message.text == "1":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 1) –ù–∞–∑–≤–∞–Ω–∏–µ\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {object.title}\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)",
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "2":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 2) –û–ø–∏—Å–∞–Ω–∏–µ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {object.description}\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "3":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 3) –¶–µ–Ω–∞\n"
            f"–¶–µ–Ω–∞: {object.price} —Ä—É–±.\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(–≤ —Ä—É–±–ª—è—Ö)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "4":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 4) –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            f"–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {object.deadline} –¥–Ω–µ–π\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(–∫–æ–ª-–≤–æ –¥–Ω–µ–π)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "5":
        await message.answer_photo(object.image)
        await message.answer(
            "‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 5) –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    await state.set_state(app.admin.states.EditItem.edit_item)


@router.message(app.admin.states.EditItem.edit_item)
async def edit_item_edit_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):

    if message.text:
        await state.update_data(edit_item=message.text.lower())
        data = await state.get_data()
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä - {data.get('object')}\n\n",
            f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç - {data.get('editable_object')}\n",
            f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ - {data.get('edit_item')}\n",
        )

    elif message.photo:
        await state.update_data(edit_item=message.photo[-2])
        data = await state.get_data()
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä - {data.get('object')}\n\n",
            f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç - {data.get('editable_object')}\n",
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ - \n",
        )
        await message.answer_photo({data.get("edit_item").file_id})

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_create_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.CreateItem.title)


@router.message(app.admin.states.CreateItem.title)
async def create_item_title(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(title=message.text.lower())

    await message.answer(
        "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (–º–∞–∫—Å. 250 —Å–∏–º–≤–æ–ª–æ–≤)",
    )

    await state.set_state(app.admin.states.CreateItem.description)


@router.message(app.admin.states.CreateItem.description)
async def create_item_description(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(description=message.text.lower())

    await message.answer("‚ùóÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É/—É—Å–ª—É–≥–µ")

    await state.set_state(app.admin.states.CreateItem.image)


@router.message(aiogram.F.photo, app.admin.states.CreateItem.image)
async def create_item_image(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(image=message.photo[-2])

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É (–≤ —Ä—É–±.)")

    await state.set_state(app.admin.states.CreateItem.price)


@router.message(app.admin.states.CreateItem.price)
async def create_item_price(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(price=message.text.lower())

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö")

    await state.set_state(app.admin.states.CreateItem.deadline)


@router.message(app.admin.states.CreateItem.deadline)
async def create_item_deadline(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(deadline=message.text.lower())
    data = await state.get_data()

    try:
        async with app.database.models.async_session() as session:
            await app.database.requests.add_item(session, data)

        response_text = (
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω:</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n\n"
            f"–¶–µ–Ω–∞: {data.get('price')} —Ä—É–±.\n"
            f"–î–µ–¥–ª–∞–π–Ω: {data.get('deadline')} –¥–Ω–µ–π"
        )
        await message.answer(response_text, parse_mode=aiogram.enums.ParseMode.HTML)
        await message.answer_photo(data.get("image").file_id)

        await state.clear()
    except ValueError as e:
        await message.answer(
            "üö´ –£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.args[0]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –∑–∞–Ω–æ–≤–æ",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
