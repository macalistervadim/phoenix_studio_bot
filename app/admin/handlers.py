import os
import uuid

import aiogram
import sqlalchemy

import app.admin.filters
import app.admin.keyboards
import app.admin.states
import app.database.admin.requests
import app.database.models
import app.database.requests
import app.keyboards
import app.messages


router = aiogram.Router()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "/admin",
)
async def cmd_admin(message: aiogram.types.Message):
    await message.answer(
        "üî∞ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω–∫—É...",
        reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.callback_query(aiogram.F.data.startswith("gift_"))
async def gift_selected(
    callback: aiogram.types.CallbackQuery,
    bot: aiogram.Bot,
):
    gift = callback.data.replace("gift_", "")
    new_gift_name = uuid.uuid4().hex

    async with app.database.models.async_session() as session:
        await app.database.admin.requests.confirm_giftcard(
            session, int(gift), new_gift_name,
        )
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–¥–∞—á—É –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ‚Ññ{gift}",
        )

        gift_user = await app.database.requests.get_gift(int(gift))
        get_gift_user = await app.database.admin.requests.get_user_for_id(
            gift_user.owner,
        )
        await bot.send_message(
            get_gift_user.tg_id,
            "‚úÖ <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ</b>\n\n"
            "–ê–≥–µ–Ω—Ç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–¥–∞—á—É –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤  <b>'–ú–æ–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö'</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.GIFT_CARDS,
        )


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤",
)
async def cmd_get_tickets(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    async with app.database.models.async_session():
        tickets = await app.database.admin.requests.get_all_open_tickets()
        if tickets:
            await message.answer(
                "‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤...\n\n",
                reply_markup=app.keyboards.CANCEL_OR_BACK,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
            for i in tickets:
                keyboard = aiogram.utils.keyboard.InlineKeyboardBuilder()
                keyboard.add(
                    aiogram.types.InlineKeyboardButton(
                        text="–í—ã–±—Ä–∞—Ç—å",
                        callback_data=f"ticket_{str(i.id)}",
                    ),
                )

                user = await app.database.admin.requests.get_user_for_id(i.user)
                await state.update_data(user=user)
                user_profile_link = (
                    f'<a href="tg://user?id={user.tg_id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
                )

                await message.answer(
                    f"<b>–¢–∏–∫–µ—Ç ‚Ññ{i.id}</b>\n\n"
                    f"{i.question}\n"
                    f"{user_profile_link}\n"
                    f"–°—Ç–∞—Ç—É—Å: {i.status.name}\n"
                    f"–°–æ–∑–¥–∞–Ω: {i.created_on}\n",
                    parse_mode=aiogram.enums.ParseMode.HTML,
                    reply_markup=keyboard.as_markup(),
                )
        else:
            await message.answer("üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç")


@router.callback_query(aiogram.F.data.startswith("ticket_"))
async def ticket_selected(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    ticket = callback.data.replace("ticket_", "")
    await state.update_data(ticket_id=ticket)

    await callback.message.answer(
        "‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞...\n"
        f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç - ‚Ññ{ticket}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n",
        reply_markup=app.admin.keyboards.CHOICE_EDIT_TICKET,
    )
    await state.set_state(app.admin.states.EditTicket.ticket_id)


@router.message(app.admin.states.EditTicket.ticket_id)
async def ticket_ticket_id(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(choice=message.text.lower())

    if message.text == "–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        await message.answer(
            "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω–∏—Ç—å",
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ORDER_STATUS,
        )
        await state.set_state(app.admin.states.EditTicket.edit_status)

    elif message.text == "–û—Ç–≤–µ—Ç–∏—Ç—å":
        await message.answer(
            "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )
        await state.set_state(app.admin.states.EditTicket.answer_ticket)


@router.message(app.admin.states.EditTicket.edit_status)
async def ticket_edit_status(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()

    async with app.database.models.async_session() as session:
        try:
            await app.database.admin.requests.update_ticket_status(
                session,
                data.get("ticket_id"),
                message.text,
            )
            await message.answer(
                f"‚úÖ –í—ã —É—Å–ø—à–µ–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ ‚Ññ{data.get('ticket_id')} –Ω–∞ - {message.text}",
                reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
            )
            await state.clear()
        except sqlalchemy.exc.DBAPIError:
            await message.answer(
                "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø–µ—Ä–µ—á–Ω—è",
                reply_markup=app.admin.keyboards.CHOICE_EDIT_ORDER_STATUS,
            )
            await state.set_state(app.admin.states.EditOrder.edit_status)
            return


@router.message(app.admin.states.EditTicket.answer_ticket)
async def ticket_answer_ticket(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
    bot: aiogram.Bot,
):
    data = await state.get_data()

    async with app.database.models.async_session() as session:
        try:
            await bot.send_message(
                data.get("user").tg_id,
                "‚ùóÔ∏è <b>–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–≥–µ–Ω—Ç–∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
                f"{message.text}",
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
            await app.database.admin.requests.update_ticket_status(
                session,
                data.get("ticket_id"),
                "IN_PROGRESS",
            )
            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞ ‚Ññ{data.get('ticket_id')}",
            )

        except AttributeError:
            await message.answer(
                f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞ ‚Ññ{data.get('ticket_id')}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –¥–∞—Ç—å –æ—Ç–≤–µ—Ç",
            )

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤",
)
async def cmd_all_orders(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    orders = await app.database.admin.requests.get_all_orders()
    if orders:
        await message.answer(
            "‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...\n\n",
            reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
        for i in orders:
            keyboard = aiogram.utils.keyboard.InlineKeyboardBuilder()
            keyboard.add(
                aiogram.types.InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å",
                    callback_data=f"order_{str(i.id)}",
                ),
            )

            item = await app.database.requests.get_item(i.product)
            user = await app.database.admin.requests.get_user_for_id(i.user)
            user_profile_link = (
                f'<a href="tg://user?id={user.tg_id}">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>'
            )
            await message.answer(
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ{i.id}</b>\n\n"
                f"{item.title.title()}\n"
                f"{user_profile_link}\n"
                f"–°—Ç–∞—Ç—É—Å: {i.status.name}\n"
                f"–°–æ–∑–¥–∞–Ω: {i.created_on}\n",
                parse_mode=aiogram.enums.ParseMode.HTML,
                reply_markup=keyboard.as_markup(),
            )
    else:
        await message.answer("üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")


@router.callback_query(aiogram.F.data.startswith("order_"))
async def order_selected(
    callback: aiogram.types.CallbackQuery,
    state: aiogram.fsm.context.FSMContext,
):
    order = callback.data.replace("order_", "")
    await state.update_data(order_id=order)

    await callback.message.answer(
        "‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...\n"
        f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ - ‚Ññ{order}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n",
        reply_markup=app.admin.keyboards.CHOICE_EDIT_ORDER,
    )
    await state.set_state(app.admin.states.EditOrder.order_id)


@router.message(app.admin.states.EditOrder.order_id)
async def order_order_id(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(choice=message.text.lower())

    if message.text == "–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        await message.answer(
            "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω–∏—Ç—å",
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ORDER_STATUS,
        )
        await state.set_state(app.admin.states.EditOrder.edit_status)


@router.message(app.admin.states.EditOrder.edit_status)
async def order_edit_status(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()
    async with app.database.models.async_session() as session:
        try:
            await app.database.admin.requests.update_order_status(
                session,
                data.get("order_id"),
                message.text,
            )
            await message.answer(
                f"‚úÖ –í—ã —É—Å–ø—à–µ–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{data.get('order_id')} –Ω–∞ - {message.text}",
                reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
            )
            await state.clear()
        except sqlalchemy.exc.DBAPIError:
            await message.answer(
                "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø–µ—Ä–µ—á–Ω—è",
                reply_markup=app.admin.keyboards.CHOICE_EDIT_ORDER_STATUS,
            )
            await state.set_state(app.admin.states.EditOrder.edit_status)
            return


@router.message(app.admin.states.EditOrder.delete_order)
async def order_delete_order(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()
    if message.text == "–í–µ—Ä–Ω–æ":
        async with app.database.models.async_session() as session:
            await app.database.admin.requests.delete_order(
                session,
                data.get("order_id"),
            )
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{data.get('order_id')}")
    else:
        await message.answer("‚ùóÔ∏è –ü–æ–Ω—è–ª! –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
)
async def cmd_all_pcodes(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    async with app.database.models.async_session():
        pcodes = await app.database.admin.requests.get_all_pcodes()

        if pcodes:
            await message.answer(
                "‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...\n\n",
                reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
                parse_mode=aiogram.enums.ParseMode.HTML,
            )
            for i in await app.database.admin.requests.get_all_pcodes():
                await message.answer(
                    f"<b>{i.name}</b>\n"
                    f"–°–∫–∏–¥–∫–∞: {i.discount}%\n"
                    f"–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {i.activations}\n",
                    parse_mode=aiogram.enums.ParseMode.HTML,
                    reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
                )

            await state.set_state(app.admin.states.DeletePocde.name)
        else:
            await message.answer("üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç")


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
)
async def cmd_delete_pcode(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞...\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.DeletePocde.name)


@router.message(app.admin.states.DeletePocde.name)
async def delete_pcode_name(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(name=message.text.lower())

    pcode = await app.database.requests.get_pcode(message.text.lower())
    await state.update_data(pcode=pcode)

    if pcode:
        await message.answer(
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥?\n\n"
            f"{pcode.name.title()}\n"
            f"–°–∫–∏–¥–∫–∞: {pcode.discount}%\n"
            f"–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {pcode.activations}",
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ITEM,
        )

    elif pcode is None:
        await message.answer(
            app.messages.FAILED_MESSAGE,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )

    await state.set_state(app.admin.states.DeletePocde.choice)


@router.message(app.admin.states.DeletePocde.choice)
async def delete_pcode_choice(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()

    if message.text == "–í–µ—Ä–Ω–æ":
        async with app.database.models.async_session() as session:
            await app.database.admin.requests.delete_pcode(
                session,
                data.get("pcode").name,
            )
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ - {data.get('name')} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        )

    elif message.text == "–ù–µ–≤–µ—Ä–Ω–æ":
        await message.answer("‚úÖ –ü–æ–Ω—è–ª... –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
)
async def cmd_create_pcode(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞...\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.CreatePcode.name)


@router.message(app.admin.states.CreatePcode.name)
async def create_pcode_name(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(name=message.text.lower())

    await message.answer(
        "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (—É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25):",
    )

    await state.set_state(app.admin.states.CreatePcode.discount)


@router.message(app.admin.states.CreatePcode.discount)
async def create_pcode_discount(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(discount=message.text.lower())

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É):")

    await state.set_state(app.admin.states.CreatePcode.activations)


@router.message(app.admin.states.CreatePcode.activations)
async def create_pcode_activations(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(activations=message.text.lower())
    author = await app.database.requests.get_user(message.from_user.id)
    await state.update_data(author=author.id)
    data = await state.get_data()

    async with app.database.models.async_session() as session:
        await app.database.admin.requests.add_pcode(session, data)

    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: {data.get('name')}\n"
        f"–ß–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {data.get('activations')}\n"
        f"–°–∫–∏–¥–∫–∞: {data.get('discount')}%",
    )

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_delete_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.DeleteItem.item)


@router.message(app.admin.states.DeleteItem.item)
async def delete_item_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(item=message.text.lower())

    object = await app.database.admin.requests.get_editable_item(message.text.lower())
    await state.update_data(object_db=object)

    if object:
        await message.answer(
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É?\n\n"
            f"{object.title.title()}\n"
            f"{object.description}\n\n"
            f"–¶–µ–Ω–∞: {object.price} —Ä—É–±.\n"
            f"–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {object.deadline} –¥–Ω–µ–π",
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ITEM,
        )

    elif object is None:
        await message.answer(
            app.messages.FAILED_MESSAGE,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )

    await state.set_state(app.admin.states.DeleteItem.choice)


@router.message(app.admin.states.DeleteItem.choice)
async def delete_item_choice(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()

    if message.text == "–í–µ—Ä–Ω–æ":
        async with app.database.models.async_session() as session:
            await app.database.admin.requests.delete_item(
                session,
                data.get("object_db").title,
            )
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞ - {data.get('item')} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        )

    elif message.text == "–ù–µ–≤–µ—Ä–Ω–æ":
        await message.answer("‚úÖ –ü–æ–Ω—è–ª... –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏")

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_edit_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "
        "(–í–ù–ò–ú–ê–ù–ò–ï: –í–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏–Ω–∞—á–µ –≤ –±–æ—Ç–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞):",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.EditItem.item)


@router.message(app.admin.states.EditItem.item)
async def edit_item_itemobject(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(object=message.text.lower())

    object = await app.database.admin.requests.get_editable_item(message.text.lower())
    await state.update_data(object_db=object)

    if object:
        await message.answer(
            "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–∞ —Ä–µ–¥–∞–∫—Ü–∏—é —Ç–æ–≤–∞—Ä...",
        )
        await message.answer_photo(object.image)
        await message.answer(
            f"<b>{object.title.title()}</b>\n\n"
            f"{object.description}\n\n"
            f"–¶–µ–Ω–∞: {object.price} —Ä—É–±.\n"
            f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {object.deadline} –¥–Ω–µ–π",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
        await message.answer(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä</b> –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É...",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.admin.keyboards.CHOICE_EDIT_ITEM,
        )

        await state.set_state(app.admin.states.EditItem.choice)

    elif object is None:
        await message.answer(
            app.messages.FAILED_MESSAGE,
            parse_mode=aiogram.enums.ParseMode.HTML,
        )

        await state.clear()


@router.message(app.admin.states.EditItem.choice)
async def edit_item_choice(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    if message.text == "–í–µ—Ä–Ω–æ":
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?\n"
            "<b>1) –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n"
            "<b>2) –û–ø–∏—Å–∞–Ω–∏–µ</b>\n"
            "<b>3) –¶–µ–Ω–∞</b>\n"
            "<b>4) –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
            "<b>5) –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n\n"
            "‚ùóÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ <b>–¶–ò–§–†–£</b> –æ–±–æ–∑–Ω–∞—á–∞—é—â—É—é –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

        await state.set_state(app.admin.states.EditItem.editable_object)
    else:
        await message.answer("üëã –ü–æ–Ω—è–ª, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—è—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")

        await state.clear()


@router.message(app.admin.states.EditItem.editable_object)
async def edit_item_editable_object(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(editable_object=message.text.lower())
    data = await state.get_data()
    object = data.get("object_db")

    if message.text == "1":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 1) –ù–∞–∑–≤–∞–Ω–∏–µ\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {object.title}\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)",
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "2":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 2) –û–ø–∏—Å–∞–Ω–∏–µ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {object.description}\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "3":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 3) –¶–µ–Ω–∞\n"
            f"–¶–µ–Ω–∞: {object.price} —Ä—É–±.\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(–≤ —Ä—É–±–ª—è—Ö)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "4":
        await message.answer(
            f"‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 4) –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            f"–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {object.deadline} –¥–Ω–µ–π\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ <b>(–∫–æ–ª-–≤–æ –¥–Ω–µ–π)</b>",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    if message.text == "5":
        await message.answer_photo(object.image)
        await message.answer(
            "‚úÖ –í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - 5) –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n\n"
            "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞",
            parse_mode=aiogram.enums.ParseMode.HTML,
            reply_markup=app.keyboards.CANCEL_OR_BACK,
        )

    await state.set_state(app.admin.states.EditItem.edit_item)


@router.message(app.admin.states.EditItem.edit_item)
async def edit_item_edit_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    data = await state.get_data()
    edit_item = message.text.lower() if message.text else None

    if data.get("editable_object") == "5":
        edit_item = message.photo[-2] if message.photo else None

    if edit_item is None:
        await state.clear()
        return

    async with app.database.models.async_session() as session:
        if data.get("editable_object") == "1":
            await app.database.admin.requests.updata_item_title(
                session,
                data.get("object_db").title,
                edit_item,
            )
            edit_object = "–ù–∞–∑–≤–∞–Ω–∏–µ"
        elif data.get("editable_object") == "2":
            await app.database.admin.requests.updata_item_description(
                session,
                data.get("object_db").description,
                edit_item,
            )
            edit_object = "–û–ø–∏—Å–∞–Ω–∏–µ"
        elif data.get("editable_object") == "3":
            await app.database.admin.requests.updata_item_price(
                session,
                data.get("object_db").price,
                edit_item,
            )
            edit_object = "–¶–µ–Ω–∞"
        elif data.get("editable_object") == "4":
            await app.database.admin.requests.updata_item_deadline(
                session,
                data.get("object_db").deadline,
                edit_item,
            )
            edit_object = "–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        elif data.get("editable_object") == "5":
            await app.database.admin.requests.updata_item_image(
                session,
                data.get("object_db").image,
                edit_item.file_id,
            )
            edit_object = "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"

    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä - {data.get('object')}\n\n"
        f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç - {data.get('editable_object')}) {edit_object}\n"
        f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ - {edit_item if isinstance(edit_item, str) else ''}\n",
    )

    if isinstance(edit_item, aiogram.types.PhotoSize):
        await message.answer_photo(edit_item.file_id)

    await state.clear()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_create_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.CreateItem.title)


@router.message(app.admin.states.CreateItem.title)
async def create_item_title(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(title=message.text.lower())

    await message.answer(
        "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (–º–∞–∫—Å. 250 —Å–∏–º–≤–æ–ª–æ–≤)",
    )

    await state.set_state(app.admin.states.CreateItem.description)


@router.message(app.admin.states.CreateItem.description)
async def create_item_description(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(description=message.text.lower())

    await message.answer("‚ùóÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É/—É—Å–ª—É–≥–µ")

    await state.set_state(app.admin.states.CreateItem.image)


@router.message(aiogram.F.photo, app.admin.states.CreateItem.image)
async def create_item_image(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(image=message.photo[-2])

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É (–≤ —Ä—É–±.)")

    await state.set_state(app.admin.states.CreateItem.price)


@router.message(app.admin.states.CreateItem.price)
async def create_item_price(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(price=message.text.lower())

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö")

    await state.set_state(app.admin.states.CreateItem.deadline)


@router.message(app.admin.states.CreateItem.deadline)
async def create_item_deadline(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(deadline=message.text.lower())
    data = await state.get_data()

    try:
        async with app.database.models.async_session() as session:
            await app.database.requests.add_item(session, data)

        response_text = (
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω:</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n\n"
            f"–¶–µ–Ω–∞: {data.get('price')} —Ä—É–±.\n"
            f"–î–µ–¥–ª–∞–π–Ω: {data.get('deadline')} –¥–Ω–µ–π"
        )
        await message.answer(response_text, parse_mode=aiogram.enums.ParseMode.HTML)
        await message.answer_photo(data.get("image").file_id)

        await state.clear()
    except ValueError as e:
        await message.answer(
            "üö´ –£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.args[0]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –∑–∞–Ω–æ–≤–æ",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
