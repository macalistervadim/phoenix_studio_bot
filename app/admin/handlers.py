import os

import aiogram

import app.admin.filters
import app.admin.keyboards
import app.admin.states
import app.database.models
import app.database.requests
import app.keyboards


router = aiogram.Router()


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "/admin",
)
async def cmd_admin(message: aiogram.types.Message):
    await message.answer(
        "üî∞ –û—Ç–∫—Ä—ã–≤–∞—é –∞–¥–º–∏–Ω–∫—É...",
        reply_markup=app.admin.keyboards.ADMIN_COMMANDS,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )


@router.message(
    app.admin.filters.IsAdmin(os.getenv("ADMIN_ID", "null_admins")),
    aiogram.F.text == "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
)
async def cmd_create_item(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await message.answer(
        "‚ùóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏...\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=app.keyboards.CANCEL_OR_BACK,
        parse_mode=aiogram.enums.ParseMode.HTML,
    )

    await state.set_state(app.admin.states.CreateItem.title)


@router.message(app.admin.states.CreateItem.title)
async def create_item_title(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(title=message.text.lower())

    await message.answer(
        "‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (–º–∞–∫—Å. 250 —Å–∏–º–≤–æ–ª–æ–≤)",
    )

    await state.set_state(app.admin.states.CreateItem.description)


@router.message(app.admin.states.CreateItem.description)
async def create_item_description(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(description=message.text.lower())

    await message.answer("‚ùóÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É/—É—Å–ª—É–≥–µ")

    await state.set_state(app.admin.states.CreateItem.image)


@router.message(aiogram.F.photo, app.admin.states.CreateItem.image)
async def create_item_image(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(image=message.photo[-2])

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É (–≤ —Ä—É–±.)")

    await state.set_state(app.admin.states.CreateItem.price)


@router.message(app.admin.states.CreateItem.price)
async def create_item_price(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(price=message.text.lower())

    await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö")

    await state.set_state(app.admin.states.CreateItem.deadline)


@router.message(app.admin.states.CreateItem.deadline)
async def create_item_deadline(
    message: aiogram.types.Message,
    state: aiogram.fsm.context.FSMContext,
):
    await state.update_data(deadline=message.text.lower())
    data = await state.get_data()

    try:
        async with app.database.models.async_session() as session:
            await app.database.requests.add_item(session, data)

        response_text = (
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω:</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n\n"
            f"–¶–µ–Ω–∞: {data.get('price')} —Ä—É–±.\n"
            f"–î–µ–¥–ª–∞–π–Ω: {data.get('deadline')} –¥–Ω–µ–π"
        )
        await message.answer(response_text, parse_mode=aiogram.enums.ParseMode.HTML)
        await message.answer_photo(data.get("image").file_id)

        await state.clear()
    except ValueError as e:
        await message.answer(
            "üö´ –£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.args[0]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –∑–∞–Ω–æ–≤–æ",
            parse_mode=aiogram.enums.ParseMode.HTML,
        )
